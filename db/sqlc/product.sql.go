// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, 
       name, 
       description, 
       price, 
       stock, 
       category_id,
       created_at, 
       updated_at, 
       deleted_at
FROM products
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

type GetAllProductsRow struct {
	ID          string
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
	Stock       pgtype.Int4
	CategoryID  pgtype.Int4
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

func (q *Queries) GetAllProducts(ctx context.Context) ([]GetAllProductsRow, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProductsRow
	for rows.Next() {
		var i GetAllProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountProduct = `-- name: GetCountProduct :one
SELECT COUNT(*) 
FROM products 
WHERE deleted_at IS NULL
`

func (q *Queries) GetCountProduct(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountProduct)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, 
       name, 
       description, 
       price, 
       stock, 
       category_id,
       created_at, 
       updated_at, 
       deleted_at
FROM products
WHERE id = $1 AND deleted_at IS NULL
`

type GetProductByIDRow struct {
	ID          string
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
	Stock       pgtype.Int4
	CategoryID  pgtype.Int4
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

func (q *Queries) GetProductByID(ctx context.Context, id string) (GetProductByIDRow, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, 
       name, 
       description, 
       price, 
       stock, 
       category_id,
       created_at, 
       updated_at, 
       deleted_at
FROM products
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32
	Offset int32
}

type ListProductsRow struct {
	ID          string
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
	Stock       pgtype.Int4
	CategoryID  pgtype.Int4
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsRow
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
