// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_id,
    channel_id
) VALUES (
    $1, $2
)
RETURNING id, user_id, channel_id, created_at, updated_at
`

type CreateSessionParams struct {
	UserID    int32
	ChannelID int32
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.ChannelID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChannelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCurrentSessions = `-- name: GetCurrentSessions :one
SELECT DISTINCT s.id, s.user_id, s.channel_id, s.created_at, s.updated_at
FROM sessions s
JOIN conversations c ON c.session_id = s.id
WHERE s.channel_id = $1
  AND c.created_at >= NOW() - INTERVAL '1 day' AND s.user_id = $2
LIMIT 1
`

type GetCurrentSessionsParams struct {
	ChannelID int32
	UserID    int32
}

func (q *Queries) GetCurrentSessions(ctx context.Context, arg GetCurrentSessionsParams) (Session, error) {
	row := q.db.QueryRow(ctx, getCurrentSessions, arg.ChannelID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChannelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
