// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conversation.sql

package db

import (
	"context"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (
    session_id,
    message,
    role
) VALUES (
    $1, $2, $3
)
RETURNING id, session_id, message, role, created_at, updated_at
`

type CreateConversationParams struct {
	SessionID int32
	Message   string
	Role      string
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRow(ctx, createConversation, arg.SessionID, arg.Message, arg.Role)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Message,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConversationsBySessionID = `-- name: GetConversationsBySessionID :many
SELECT id, session_id, message, role, created_at, updated_at
FROM conversations
WHERE session_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetConversationsBySessionID(ctx context.Context, sessionID int32) ([]Conversation, error) {
	rows, err := q.db.Query(ctx, getConversationsBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Message,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
