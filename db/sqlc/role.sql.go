// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    name,
    is_active
) VALUES (
    $1, $2
)   
RETURNING id, name, created_at, updated_at, is_active
`

type CreateRoleParams struct {
	Name     string
	IsActive bool
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.IsActive)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteRoleById = `-- name: DeleteRoleById :exec
UPDATE roles
SET is_active = false, updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteRoleById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRoleById, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, created_at, updated_at, is_active FROM roles
WHERE id = $1 and is_active = true LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, created_at, updated_at, is_active FROM roles
WHERE name = $1 and is_active = true LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const listRole = `-- name: ListRole :many
SELECT id, name, created_at, updated_at, is_active FROM roles
where is_active = true
`

func (q *Queries) ListRole(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleById = `-- name: UpdateRoleById :exec
UPDATE roles
SET name = $2, is_active = $3, updated_at = now()
WHERE id = $1
`

type UpdateRoleByIdParams struct {
	ID       int32
	Name     string
	IsActive bool
}

func (q *Queries) UpdateRoleById(ctx context.Context, arg UpdateRoleByIdParams) error {
	_, err := q.db.Exec(ctx, updateRoleById, arg.ID, arg.Name, arg.IsActive)
	return err
}
