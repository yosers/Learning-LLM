// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
WHERE is_active = true
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    shop_id,
    email,
    phone,
    is_active
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, shop_id, email, unconfirmed_email, phone, code_area, unconfirmed_phone, is_active, created_at, updated_at, slug
`

type CreateUserParams struct {
	ShopID   int32
	Email    pgtype.Text
	Phone    pgtype.Text
	IsActive pgtype.Bool
}

// WHERE shop_id = $1;
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ShopID,
		arg.Email,
		arg.Phone,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.CodeArea,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
UPDATE users    
SET is_active = false, updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const findUserByPhone = `-- name: FindUserByPhone :one
SELECT id, shop_id, email, unconfirmed_email, phone, code_area, unconfirmed_phone, is_active, created_at, updated_at, slug FROM users
WHERE phone = $1 AND is_active = true LIMIT 1
`

func (q *Queries) FindUserByPhone(ctx context.Context, phone pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, findUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.CodeArea,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}

const findUserByPhoneAndCode = `-- name: FindUserByPhoneAndCode :one
SELECT id, shop_id, email, unconfirmed_email, phone, code_area, unconfirmed_phone, is_active, created_at, updated_at, slug FROM users
WHERE phone = $1 and code_area = $2  AND is_active = true LIMIT 1
`

type FindUserByPhoneAndCodeParams struct {
	Phone    pgtype.Text
	CodeArea pgtype.Text
}

func (q *Queries) FindUserByPhoneAndCode(ctx context.Context, arg FindUserByPhoneAndCodeParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserByPhoneAndCode, arg.Phone, arg.CodeArea)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.CodeArea,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT us.id, us.shop_id, us.email, us.unconfirmed_email, us.phone, us.code_area, us.unconfirmed_phone, us.is_active, us.created_at, us.updated_at, us.slug, s."name" FROM users us join shops s on us.shop_id = s.id 
WHERE us.id = $1 and us.is_active = true LIMIT 1
`

type GetUserRow struct {
	ID               int32
	ShopID           int32
	Email            pgtype.Text
	UnconfirmedEmail pgtype.Text
	Phone            pgtype.Text
	CodeArea         pgtype.Text
	UnconfirmedPhone pgtype.Text
	IsActive         pgtype.Bool
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	Slug             pgtype.UUID
	Name             string
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.CodeArea,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.Name,
	)
	return i, err
}

const listUserRole = `-- name: ListUserRole :many
select rl.id, rl.name, rl.created_at, rl.updated_at, rl.is_active from users us join user_roles ur
on us.id = ur.user_id 
join roles rl on rl.id = ur.role_id 
where us.id = $1 AND us.is_active = true
order by rl.id ASC
`

func (q *Queries) ListUserRole(ctx context.Context, id int32) ([]Role, error) {
	rows, err := q.db.Query(ctx, listUserRole, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT us.id, us.shop_id, us.email, us.unconfirmed_email, us.phone, us.code_area, us.unconfirmed_phone, us.is_active, us.created_at, us.updated_at, us.slug, s."name" as shopName FROM users us join shops s on us.shop_id = s.id 
WHERE  us.is_active = true
ORDER BY us.created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

type ListUsersRow struct {
	ID               int32
	ShopID           int32
	Email            pgtype.Text
	UnconfirmedEmail pgtype.Text
	Phone            pgtype.Text
	CodeArea         pgtype.Text
	UnconfirmedPhone pgtype.Text
	IsActive         pgtype.Bool
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	Slug             pgtype.UUID
	Shopname         string
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Email,
			&i.UnconfirmedEmail,
			&i.Phone,
			&i.CodeArea,
			&i.UnconfirmedPhone,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Slug,
			&i.Shopname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = COALESCE($2, email),
    phone = COALESCE($3, phone),
    is_active = COALESCE($4, is_active),
    updated_at = now()
WHERE id = $1
RETURNING id, shop_id, email, unconfirmed_email, phone, code_area, unconfirmed_phone, is_active, created_at, updated_at, slug
`

type UpdateUserParams struct {
	ID       int32
	Email    pgtype.Text
	Phone    pgtype.Text
	IsActive pgtype.Bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.CodeArea,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}
