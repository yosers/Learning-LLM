// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    shop_id,
    email,
    phone,
    is_active
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, shop_id, email, unconfirmed_email, phone, unconfirmed_phone, is_active, created_at, updated_at, slug
`

type CreateUserParams struct {
	ID       int32
	ShopID   int32
	Email    pgtype.Text
	Phone    pgtype.Text
	IsActive pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.ShopID,
		arg.Email,
		arg.Phone,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, shop_id, email, unconfirmed_email, phone, unconfirmed_phone, is_active, created_at, updated_at, slug FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, shop_id, email, unconfirmed_email, phone, unconfirmed_phone, is_active, created_at, updated_at, slug FROM users
WHERE shop_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context, shopID int32) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Email,
			&i.UnconfirmedEmail,
			&i.Phone,
			&i.UnconfirmedPhone,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = COALESCE($2, email),
    phone = COALESCE($3, phone),
    is_active = COALESCE($4, is_active),
    updated_at = now()
WHERE id = $1
RETURNING id, shop_id, email, unconfirmed_email, phone, unconfirmed_phone, is_active, created_at, updated_at, slug
`

type UpdateUserParams struct {
	ID       int32
	Email    pgtype.Text
	Phone    pgtype.Text
	IsActive pgtype.Bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Email,
		&i.UnconfirmedEmail,
		&i.Phone,
		&i.UnconfirmedPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}
