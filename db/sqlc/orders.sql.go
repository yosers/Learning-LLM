// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (shop_id, user_id, total, status)
VALUES ($1, $2, $3, $4)
RETURNING id, shop_id, user_id, total, status, created_at
`

type CreateOrderParams struct {
	ShopID int32
	UserID pgtype.Int4
	Total  pgtype.Numeric
	Status pgtype.Text
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ShopID,
		arg.UserID,
		arg.Total,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getCountOrder = `-- name: GetCountOrder :one
SELECT COUNT(*) 
FROM orders
`

func (q *Queries) GetCountOrder(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountOrder)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getListOrders = `-- name: GetListOrders :many
SELECT 
  o.id, 
  s.name AS shop_name, 
  u.id AS user_id, 
  o.total, 
  o.status, 
  o.created_at
FROM orders o
JOIN shops s ON o.shop_id = s.id
JOIN users u ON o.user_id = u.id
WHERE ($3::int = 0 OR u.id = $3)
  AND ($4::text = '' OR o.status = $4)
ORDER BY o.created_at DESC
LIMIT $1 OFFSET $2
`

type GetListOrdersParams struct {
	Limit   int32
	Offset  int32
	Column3 int32
	Column4 string
}

type GetListOrdersRow struct {
	ID        int32
	ShopName  string
	UserID    int32
	Total     pgtype.Numeric
	Status    pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetListOrders(ctx context.Context, arg GetListOrdersParams) ([]GetListOrdersRow, error) {
	rows, err := q.db.Query(ctx, getListOrders,
		arg.Limit,
		arg.Offset,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListOrdersRow
	for rows.Next() {
		var i GetListOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.ShopName,
			&i.UserID,
			&i.Total,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, shop_id, user_id, total, status, created_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET total = COALESCE($2, total), status = COALESCE($3, status)  
WHERE id = $1
RETURNING id, shop_id, user_id, total, status, created_at
`

type UpdateOrderParams struct {
	ID     int32
	Total  pgtype.Numeric
	Status pgtype.Text
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.ID, arg.Total, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
