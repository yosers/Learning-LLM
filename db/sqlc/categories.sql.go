// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    id,
    shop_id,
    name,
    parent_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, shop_id, name, parent_id
`

type CreateCategoryParams struct {
	ID       int32
	ShopID   int32
	Name     string
	ParentID pgtype.Int4
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.ID,
		arg.ShopID,
		arg.Name,
		arg.ParentID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Name,
		&i.ParentID,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getAllCategory = `-- name: GetAllCategory :many
SELECT id, 
       shop_id, 
       name,
       parent_id 
FROM categories
LIMIT $1 OFFSET $2
`

type GetAllCategoryParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllCategory(ctx context.Context, arg GetAllCategoryParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, getAllCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Name,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesPaginated = `-- name: GetCategoriesPaginated :many
SELECT id, shop_id, name, parent_id FROM categories
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetCategoriesPaginatedParams struct {
	Limit  int32
	Offset int32
}

type ListCategoriesRow struct {
	ID          pgtype.Numeric
	ShopID      pgtype.Numeric
	Name		pgtype.Text
	ParentID    pgtype.Numeric
}

func (q *Queries) GetCategoriesPaginated(ctx context.Context, arg GetCategoriesPaginatedParams) ([]ListCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getCategoriesPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCategoriesRow
	for rows.Next() {
		var i ListCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Name,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, 
       shop_id, 
       name,
       parent_id 
FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Name,
		&i.ParentID,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET 
    shop_id = COALESCE($2, shop_id),
    name = COALESCE($3, name),
    parent_id = COALESCE($4, parent_id)
WHERE id = $1
RETURNING id, shop_id, name, parent_id
`

type UpdateCategoryParams struct {
	ID       int32
	ShopID   int32
	Name     string
	ParentID pgtype.Int4
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.ID,
		arg.ShopID,
		arg.Name,
		arg.ParentID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Name,
		&i.ParentID,
	)
	return i, err
}
