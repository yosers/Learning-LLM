// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profiles (
    user_id,
    phone,
    first_name,
    last_name,
    address,
    city,
    country,
    postal_code
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING user_id, phone, first_name, last_name, address, city, country, postal_code
`

type CreateUserProfileParams struct {
	UserID     int32
	Phone      pgtype.Text
	FirstName  pgtype.Text
	LastName   pgtype.Text
	Address    pgtype.Text
	City       pgtype.Text
	Country    pgtype.Text
	PostalCode pgtype.Text
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.UserID,
		arg.Phone,
		arg.FirstName,
		arg.LastName,
		arg.Address,
		arg.City,
		arg.Country,
		arg.PostalCode,
	)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Address,
		&i.City,
		&i.Country,
		&i.PostalCode,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT user_id, phone, first_name, last_name, address, city, country, postal_code FROM user_profiles
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserProfile(ctx context.Context, userID int32) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Address,
		&i.City,
		&i.Country,
		&i.PostalCode,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE user_profiles
SET 
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    address = COALESCE($4, address),
    city = COALESCE($5, city),
    country = COALESCE($6, country),
    postal_code = COALESCE($7, postal_code),
    phone = COALESCE($8, phone)
WHERE user_id = $1
`

type UpdateUserProfileParams struct {
	UserID     int32
	FirstName  pgtype.Text
	LastName   pgtype.Text
	Address    pgtype.Text
	City       pgtype.Text
	Country    pgtype.Text
	PostalCode pgtype.Text
	Phone      pgtype.Text
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.Exec(ctx, updateUserProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Address,
		arg.City,
		arg.Country,
		arg.PostalCode,
		arg.Phone,
	)
	return err
}
