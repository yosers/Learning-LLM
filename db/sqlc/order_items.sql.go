// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderItems = `-- name: CreateOrderItems :one
INSERT INTO order_items (order_id, product_id, quantity, unit_price)
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, product_id, quantity, unit_price
`

type CreateOrderItemsParams struct {
	OrderID   int32
	ProductID pgtype.Text
	Quantity  int32
	UnitPrice pgtype.Numeric
}

func (q *Queries) CreateOrderItems(ctx context.Context, arg CreateOrderItemsParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItems,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.UnitPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
	)
	return i, err
}

const getOrderItemsByID = `-- name: GetOrderItemsByID :many
select o.id as order_id, pr.name, pr.description, oi.quantity, oi.unit_price from orders o 
join order_items oi on o.id = oi.order_id
join products pr on pr.id = oi.product_id 
where o.id = $1
`

type GetOrderItemsByIDRow struct {
	OrderID     int32
	Name        string
	Description pgtype.Text
	Quantity    int32
	UnitPrice   pgtype.Numeric
}

func (q *Queries) GetOrderItemsByID(ctx context.Context, id int32) ([]GetOrderItemsByIDRow, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsByIDRow
	for rows.Next() {
		var i GetOrderItemsByIDRow
		if err := rows.Scan(
			&i.OrderID,
			&i.Name,
			&i.Description,
			&i.Quantity,
			&i.UnitPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
